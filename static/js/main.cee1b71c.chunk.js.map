{"version":3,"sources":["components/List.js","components/UserDetail.js","components/LoadingScreen.js","components/Main.js","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["List","props","className","onClick","handleClick","data","id","src","profileImage","alt","name","firstName","address","city","UserDetail","console","log","closeUserDetail","lastName","email","phone","state","country","zipCode","countryCode","LoadingScreen","Main","displayUserDetail","filter","item","setState","showUserDetail","showUserInfo","showUserId","isLoaded","fetch","then","response","json","userData","this","map","list","key","React","Component","Header","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2WAoBeA,MAjBf,SAAcC,GACV,OACI,yBAAKC,UAAU,iBAAiBC,QAAS,kBAAIF,EAAMG,YAAYH,EAAMI,KAAKC,MACtE,yBAAKJ,UAAU,iBACX,yBAAKK,IAAKN,EAAMI,KAAKG,aAAcN,UAAU,cAAcO,IAAKR,EAAMI,KAAKK,QAE/E,yBAAKR,UAAU,yBACX,0BAAMA,UAAU,QAAQD,EAAMI,KAAKM,WACnC,0BAAMT,UAAU,QAAhB,SAA8BD,EAAMI,KAAKO,QAAQC,KAAjD,Q,YCwBDC,MAhCf,SAAoBb,GAEhB,OADAc,QAAQC,IAAIf,GAER,yBAAKC,UAAU,iCACX,4BAASA,UAAU,QAAQC,QAAS,WAAKF,EAAMgB,oBAA/C,SACA,yBAAKf,UAAU,uBACX,yBAAKA,UAAU,8BACf,yBAAKK,IAAKN,EAAMI,KAAKG,aAAcN,UAAU,cAAcO,IAAKR,EAAMI,KAAKK,QAE3E,yBAAKR,UAAU,+BACX,4BAAKD,EAAMI,KAAKM,UAAhB,IAA4BV,EAAMI,KAAKa,UAAc,6BACrD,wCAAcjB,EAAMI,KAAKc,OAAa,6BACtC,wCAAclB,EAAMI,KAAKe,OAAa,6BACtC,uCAAanB,EAAMI,KAAKO,QAAQC,MAAY,6BAC5C,wCAAcZ,EAAMI,KAAKO,QAAQS,OAAa,6BAC9C,0CAAgBpB,EAAMI,KAAKO,QAAQU,SAAe,6BAClD,2CAAiBrB,EAAMI,KAAKO,QAAQW,SAAe,6BACnD,+CAAqBtB,EAAMI,KAAKO,QAAQY,aAAmB,iCCbhEC,MALf,WACI,OACI,2CC4EOC,E,YAzEX,aAAc,IAAD,8BACT,+CAiBJC,kBAAkB,SAACrB,GAGf,EAAKe,MAAMhB,KAAKuB,QAAO,SAAAC,GAChBvB,IAAOuB,EAAKvB,IACX,EAAKwB,SAAS,CACVC,gBAAe,EACfC,aAAaH,QAzBhB,EAgCbZ,gBAAgB,WACZF,QAAQC,IAAI,2BACZ,EAAKc,SAAS,CACVC,gBAAe,EACfE,WAAW,QApCN,EAuCb7B,YAAY,SAACE,GAET,EAAKqB,kBAAkBrB,IAvCvB,EAAKe,MAAM,CACPhB,KAAK,GACL6B,UAAS,EACTH,gBAAe,EACfE,WAAW,KACXD,aAAa,MAPR,E,iFAUO,IAAD,OACfG,MAAM,uCACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAA/B,GAAI,OAAI,EAAKyB,SAAS,CACxBzB,KAAKA,EACL6B,UAAS,S,+BA6BZ,IAAD,OACAK,EAAU,KACd,OAAGC,KAAKnB,MAAMa,UACVK,EAAWC,KAAKnB,MAAMhB,KAAKoC,KAAI,SAAAC,GAC3B,OACI,kBAAC,EAAD,CAAMC,IAAKD,EAAKpC,GAAID,KAAMqC,EAAMtC,YAAa,EAAKA,iBAa1D,yBAAKF,UAAU,gBACVqC,EAEEC,KAAKnB,MAAMU,eAAgB,kBAAC,EAAD,CAAYd,gBAAiBuB,KAAKvB,gBAAiBZ,KAAMmC,KAAKnB,MAAMW,eAAiB,KATnH,kBAAC,EAAD,U,GAzDGY,IAAMC,W,MCIVC,MAPf,WACI,OACI,yBAAK5C,UAAU,UACX,yCCQG6C,MATf,WACE,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,QCGcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvB,MAAK,SAAAwB,GACjCA,EAAaC,kB","file":"static/js/main.cee1b71c.chunk.js","sourcesContent":["import React from \"react\";\nimport './List.css';\n\nfunction List(props){\n    return(\n        <div className=\"user-container\" onClick={()=>props.handleClick(props.data.id)}>\n            <div className=\"image-wrapper\">\n                <img src={props.data.profileImage} className=\"imageHolder\" alt={props.data.name}></img>\n            </div>\n            <div className=\"user-detail-container\">\n                <span className=\"name\">{props.data.firstName}</span>\n                <span className=\"city\">From \"{props.data.address.city}\"</span>\n                \n            </div>\n             \n        </div>\n      \n      \n    )\n}\nexport default List;","import React from 'react';\nimport './UserDetail.css';\n\nfunction UserDetail(props){\n    console.log(props)\n    return(\n        <div className=\"user-detail-wrapper-container\">\n            <button  className=\"close\" onClick={()=>{props.closeUserDetail()}}>close</button>\n            <div className=\"user-detail-wrapper\">\n                <div className=\"user-profile-image-wrapper\">\n                <img src={props.data.profileImage} className=\"imageHolder\" alt={props.data.name}></img>\n                </div>\n                <div className=\"user-profile-detail-wrapper\">\n                    <h1>{props.data.firstName} {props.data.lastName}</h1><br/>\n                    <span>Email: {props.data.email}</span><br/>\n                    <span>Phone: {props.data.phone}</span><br/>\n                    <span>city: {props.data.address.city}</span><br/>\n                    <span>state: {props.data.address.state}</span><br/>\n                    <span>country: {props.data.address.country}</span><br/>\n                    <span>zip code: {props.data.address.zipCode}</span><br/>\n                    <span>country code: {props.data.address.countryCode}</span><br/>\n\n\n\n                </div>\n            \n            \n                \n          \n            </div>\n        </div>\n        \n        \n    )\n}\nexport default UserDetail;","import React from 'react';\n\nfunction LoadingScreen(){\n    return(\n        <h1>Loading...</h1>\n    )\n}\nexport default LoadingScreen;","import React from 'react';\nimport List from './List';\nimport './Main.css';\nimport UserDetail from './UserDetail';\nimport Loading from './LoadingScreen';\n\nclass Main extends React.Component{\n    constructor(){\n        super();\n        this.state={\n            data:[],\n            isLoaded:false,\n            showUserDetail:false,\n            showUserId:null,\n            showUserInfo:null\n        }\n    }\n    componentDidMount(){\n        fetch(\"https://mock-io.herokuapp.com/users\")\n            .then(response => response.json())\n            .then(data => this.setState({\n                data:data,\n                isLoaded:true\n            }))\n    }\n    displayUserDetail=(id)=>{\n       \n        \n        this.state.data.filter(item =>{\n            if(id === item.id){\n                this.setState({\n                    showUserDetail:true,\n                    showUserInfo:item\n                }); \n            }\n           \n        })\n        \n    }\n    closeUserDetail=()=>{\n        console.log(\" i will close this page\");\n        this.setState({\n            showUserDetail:false,\n            showUserId:null\n        });\n    }\n    handleClick=(id)=> {\n        \n        this.displayUserDetail(id);\n    }\n   \n    render(){\n        let userData= null;\n        if(this.state.isLoaded){\n            userData = this.state.data.map(list=>{\n                return(\n                    <List key={list.id} data={list} handleClick={this.handleClick}/>\n\n                )\n                   \n               })\n        }else{\n            return(\n                <Loading/>\n            )\n        }\n        \n        \n        return(\n            <div className=\"Main-wrapper\">\n                {userData}\n               {\n                   this.state.showUserDetail? <UserDetail closeUserDetail={this.closeUserDetail} data={this.state.showUserInfo}/> :\"\"\n               }\n\n            </div>\n         \n        )\n    }\n}\nexport default Main;","import React from 'react';\nimport './Header.css';\n\nfunction Header(){\n    return(\n        <div className=\"header\">\n            <h1>Peoples</h1>\n        </div>\n    )\n}\nexport default Header;","import React from 'react'\nimport './App.css';\nimport Main from './components/Main';\nimport Header from './components/Header';\n\nfunction App() {\n  return (\n    <div>\n      <Header/>\n      <Main/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}